###############################################################################
# Copyright (c) 2010 Nokia Siemens Networks Oyj, Finland.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
#     Nokia Siemens Networks Oyj, initial LLVM support as an add-on to CDT.
###############################################################################

# plugin names
pluginName=LLVM Managed Build Definitions
providerName=Nokia Siemens Networks

# Build Model Names
TargetName.llvm=LLVM
TargetName.llvm.bitcode=LLVM bitcode

ClangBuiltinSpecsDetector.name = CDT GCC Built - in Compiler Settings Cross ARM
configuration.name = LLVM Configuration

project.type.exe = Project exe
project.type.so = Shared project
project.type.static = Static Project

toolchain.name = ARM Cortex-M Clang/LLVM (meta,built-in)
option.toolchain.default = Toolchain default
option.toolchain.command.c = C compiler
option.toolchain.command.cpp = C++ compiler
option.toolchain.command.ar = Archiver
option.toolchain.command.objcopy = Hex / Bin converter
option.toolchain.command.listing = Listing generator
option.toolchain.command.size = Size command
option.toolchain.command.make = Build command
option.toolchain.command.rm = Remove command
builder.toolchain.base = Cross llvm builder
builder.toolchain.base.abstract = Abstract Cross llvm builder
option.toolchain.architecture = Architecture
option.toolchain.architecture.arm = ARM (AArch32)
option.toolchain.architecture.aarch64 = ARM64 (AArch64)

option.toolchain.prefix = Prefix
option.toolchain.suffix = Suffix
option.toolchain.path = Path

option.toolchain.useglobalpath = Use built in toolchain 
option.toolchain.flash = Converter object to binary
option.toolchain.listing = Create extended listing
option.toolchain.size = Show Binary Information 

optionCategory.target = Target Processor
option.target.arm.family = ARM family
option.target.arm.architecture = Architecture
option.target.arm.thumb = Thumb (-mthumb)
option.target.arm.instructionset = Instruction set
option.target.arm.instructionset.thumb = Thumb (-mthumb)
option.target.arm.instructionset.arm = ARM (-marm)
option.target.arm.instructionset.default = Toolchain default
option.target.arm.thumbInterwork = Thumb interwork (-mthumb - interwork)
option.target.arm.endianness = Endianness
option.target.arm.endianness.default = Toolchain default
option.target.arm.endianness.little = Little endian (-mlittle - endian)
option.target.arm.endianness.big = Big endian (-mbig - endian)
option.target.arm.floatABI = Float ABI
option.target.arm.floatABI.default = Toolchain default
option.target.arm.floatABI.soft = Library (soft)
option.target.arm.floatABI.softfp = Library with FP (softfp)
option.target.arm.floatABI.hard = FP instructions (hard) 
option.target.arm.fpuType = FPU Type
option.target.arm.fpuType.default = Toolchain default
option.target.arm.fpuType.fpa = fpa (deprecated)
option.target.arm.fpuType.fpe2 = fpe2 (deprecated)
option.target.arm.fpuType.fpe3 = fpe3 (deprecated)
option.target.arm.fpuType.maverick = maverick (deprecated)
option.target.arm.fpuType.vfp = vfp
option.target.arm.fpuType.vfpv3 = vfpv3
option.target.arm.fpuType.vfpv3fp16 = vfpv3 - fp16
option.target.arm.fpuType.vfpv3d16 = vfpv3 - d16
option.target.arm.fpuType.vfpv3d16fp16 = vfpv3 - d16 - fp16
option.target.arm.fpuType.vfpv3xd = vfpv3xd
option.target.arm.fpuType.vfpv3xdfp16 = vfpv3xd - fp16
option.target.arm.fpuType.neon = neon
option.target.arm.fpuType.neonfp16 = neon - fp16
option.target.arm.fpuType.vfpv4 = vfpv4
option.target.arm.fpuType.vfpv4d16 = vfpv4 - d16
option.target.arm.fpuType.fpv4spd16 = fpv4 - sp - d16
option.target.arm.fpuType.neonvfpv4 = neon - vfpv4
option.target.arm.fpuType.fpv5d16 = fpv5 - d16
option.target.arm.fpuType.fpv5spd16 = fpv5 - sp - d16
option.target.arm.fpuType.fparmv8 = fp - armv8
option.target.arm.fpuType.neonfparmv8 = neon - fp - armv8
option.target.arm.fpuType.cryptoneonfparmv8 = crypto - neon - fp - armv8

option.target.arm.unalignedaccess = Unaligned access
option.target.arm.unalignedaccess.enabled = Enabled (-munaligned - access)
option.target.arm.unalignedaccess.disabled = Disabled (-mno - unaligned - access)
option.target.arm.unalignedaccess.default = Toolchain default

option.target.aarch64.family = AArch64 family
option.target.aarch64.feature.crc = Feature crc
option.target.aarch64.feature.crc.enabled = Enabled (+crc)
option.target.aarch64.feature.crc.disabled = Disabled (+nocrc)
option.target.aarch64.feature.crc.default = Toolchain default
option.target.aarch64.feature.crypto = Feature crypto
option.target.aarch64.feature.crypto.enabled = Enabled (+crypto)
option.target.aarch64.feature.crypto.disabled = Disabled (+nocrypto)
option.target.aarch64.feature.crypto.default = Toolchain default
option.target.aarch64.feature.fp = Feature fp
option.target.aarch64.feature.fp.enabled = Enabled (+fp)
option.target.aarch64.feature.fp.disabled = Disabled (+nofp)
option.target.aarch64.feature.fp.default = Toolchain default
option.target.aarch64.feature.simd = Feature simd
option.target.aarch64.feature.simd.enabled = Enabled (+simd)
option.target.aarch64.feature.simd.disabled = Disabled (+nosimd)
option.target.aarch64.feature.simd.default = Toolchain default
option.target.aarch64.cmodel = Code model
option.target.aarch64.cmodel.tiny = Tiny (-mcmodel = tiny)
option.target.aarch64.cmodel.small = Small (-mcmodel = small)
option.target.aarch64.cmodel.large = Large (-mcmodel = large)
option.target.aarch64.cmodel.default = Toolchain default

option.target.aarch64.strictalign = Strict align (-mstrict - align)

option.target.other = Other target flags

optionCategory.optimization = Optimization
option.optimization.llvm.representations = Use the LLVM representation for assembler and object files (-emit-llvm)
option.optimization.level = Optimization Level
option.optimization.level.none = None (-O0)
option.optimization.level.optimize = Optimize (-O1)
option.optimization.level.more = Optimize more (-O2)
option.optimization.level.most = Optimize most (-O3)
option.optimization.level.size = Optimize size (-Os)
option.optimization.level.debug = Optimize for debug (-Og)
option.optimization.messagelength = Message length (-fmessage - length = 0)
option.optimization.signedchar = 'char' is signed (-fsigned - char)
option.optimization.functionsections = Function sections (-ffunction - sections)
option.optimization.datasections = Data sections (-fdata - sections)
option.optimization.nocommon = No common unitialized (-fno - common)
option.optimization.noinlinefunctions = Do not inline functions (-fno - inline - functions)
option.optimization.freestanding = Assume freestanding environment (-ffreestanding)
option.optimization.nobuiltin = Disable builtin (-fno - builtin)
option.optimization.spconstant = Single precision constants (-fsingle - precision - constant)
option.optimization.PIC = Position independent code (-fPIC)
option.optimization.lto = Link - time optimizer (-flto)
option.optimization.nomoveloopinvariants = Disable loop invariant move (-fno - move - loop - invariants)
option.optimization.other = Other optimization flags


optionCategory.warnings = Warnings
option.warnings.syntaxonly = Check syntax only (-fsyntax - only)
option.warnings.pedantic = Pedantic (-pedantic)
option.warnings.pedanticerrors = Pedantic warnings as errors (-pedantic - errors)
option.warnings.allwarn = Enable all common warnings (-Wall)
option.warnings.extrawarn = Enable extra warnings (-Wextra)

option.warnings.conversion = Warn on implicit conversions (-Wconversion)
#option.warnings.unitialized = Warn on uninitialized variables (-Wuninitialised)
option.warnings.uninitialized = Warn on uninitialized variables (-Wuninitialised)
option.warnings.unused = Warn on various unused elements (-Wunused)
option.warnings.padded = Warn if padding is included (-Wpadded)
option.warnings.floatequal = Warn if floats are compared as equal (-Wfloat - equal)
option.warnings.shadow = Warn if shadowed variable (-Wshadow)
option.warnings.pointerarith = Warn if pointer arithmetic (-Wpointer - arith)
option.warnings.badfunctioncast = Warn if wrong cast(-Wbad - function - cast)
option.warnings.logicalop = Warn if suspicious logical ops (-Wlogical - op)
option.warnings.agreggatereturn = Warn if struct is returned (-Wagreggate - return)
option.warnings.missingdeclaration = Warn on undeclared global function (-Wmissing - declaration)
option.warnings.strictprototypes = Warn if a function has no arg type (-Wstrict - prototypes)
option.warnings.missingprototypes = Warn if a global function has no prototype (-Wmissing - prototypes)

option.warnings.toerrors = Generate errors instead of warnings (-Werror)
option.warnings.nowarn = Inhibit all warnings (-w)
option.warnings.other = Other warning flags

optionCategory.debugging = Debugging
option.debugging.level = Debug level
option.debugging.level.none = None
option.debugging.level.minimal = Minimal (-g1)
option.debugging.level.default = Default (-g)
option.debugging.level.max = Maximum (-g3)

option.debugging.format = Debug format
option.debugging.default = Toolchain default
option.debugging.gdb = gdb
option.debugging.stabs = stabs
option.debugging.stabsplus = stabs +
option.debugging.dwarf2 = dwarf - 2
option.debugging.dwarf3 = dwarf - 3
option.debugging.dwarf4 = dwarf - 4

option.debugging.prof = Generate prof information (-p)
option.debugging.gprof = Generate gprof information (-pg)
option.debugging.other = Other debugging flags

option.common.name = Common options
option.common.target.arch32 = ARM32 Targets common options
option.common.target.arch64 = ARM64 Targets common options
# Tool-chain names
ToolChainName.llvm=Abstract LLVM
ToolChainName.llvm.with.linker=LLVM with C/C++ Linker
ToolChainName.llvm.with.static.compiler=LLVM with static compiler
ToolChainName.llvm.clang.cross = ARM Cortex-M Clang/LLVM (meta)
ToolChainName.llvm.clang.abstract = Abstract ARM Cortex-M Clang/LLVM (meta)
ToolName.linker.llvm.gcc=LLVM GNU C linker
ToolName.linker.llvm.g++=LLVM GNU C++ linker

# Default Configuration Names
# START NON-TRANSLATABLE
ConfigName.Rel=Release
ConfigName.Dbg=Debug
ConfigName.Rel.Win32=Release
ConfigName.Dbg.Win32=Debug
ConfigName.Rel.Gnu=Release
ConfigName.Dbg.Gnu=Debug

option.compiler.stackprotector = Check for stack smashing in functions (-fstack-protector)
option.compiler.stackusage = Estimate stack usage (-stack-usage)

# END NON-TRANSLATABLE
tab.toolchainSettings = Toolchain (meta)

# Generic platform names (copied from org.eclipse.cdt.managedbuilder.gnu.ui)
PlatformName.Rel=Release Platform
PlatformName.Dbg=Debug Platform

# LLVM tool names
ToolName.archiver.llvm.base=Abstract LLVM base archiver
ToolName.archiver.llvm=LLVM archiver

ToolName.assembler.llvm.base =Abstract LLVM base assembler
ToolName.assembler.llvm =LLVM Assembler

ToolName.compiler.llvm.abstract=Abstract LLVM C/C++ compiler
ToolName.compiler.llvm.c=LLVM C Compiler
ToolName.compiler.llvm.cpp=LLVM C++ Compiler
ToolName.compiler.llvm.gcc=LLVM GCC
ToolName.compiler.llvm.g++=LLVM G++

ToolName.linker.llvm.base=Abstract LLVM Base linker
ToolName.linker.llvm.c.base=Abstract LLVM C linker
ToolName.linker.llvm.c=LLVM C linker
ToolName.linker.llvm.cpp.base=Abstract LLVM C++ linker
ToolName.linker.llvm.cpp=LLVM C++ linker

ToolName.llc.llvm.base=Abstract LLVM Standard alone Static Compiler tool
ToolName.llc.llvm.c=LLVM C Static Compiler
ToolName.llc.llvm.cpp=LLVM C++ Static Compiler

ToolName.lli.llvm.base=Abstract LLVM Standard alone JIT compiler/Interpreter tool
ToolName.compiler.llvm.abstract=Abstract LLVM C/C++ compiler
ToolName.compiler.llvm.c.abstract=Abstract LLVM C compiler
ToolName.compiler.llvm.cpp.abstract=Abstract LLVM C++ compiler

option.compiler.std = Language standard
option.c_cpp.compiler.std.ansi = ISO C90 (-ansi)
option.c_cpp.compiler.std.c99 = ISO C99 (-std = c99)
option.c_cpp.compiler.std.c11 = ISO C11 (-std = c11)
option.c_cpp.compiler.std.default = Toolchain default (GNU ISO C90)
option.c_cpp.compiler.std.gnu99 = GNU ISO C99 (-std = gnu99)
option.c_cpp.compiler.std.gnu11 = GNU ISO C11 (-std = gnu11)

# Option Names
# Generic Category Names
#OptionCategory.Symbols = Symbols
OptionCategory.Dialect = Dialect
OptionCategory.Preproc=Preprocessor
OptionCategory.Dirs=Directories
OptionCategory.General=General
OptionCategory.Optimize=Optimization
OptionCategory.Debug=Debugging
OptionCategory.Warn=Warnings
OptionCategory.Misc=Miscellaneous
OptionCategory.Includes=Includes
OptionCategory.Libs=Libraries
OptionCategory.Options=Options
OptionCategory.Optimizations=Optimization
OptionCategory.FloatingPointOptions=Floating Point Options
OptionCategory.CodeGenerationOptions=Code Generation Options
#OptionCategory.Shared.Settings=Shared Library Settings

# Generic Option Names
Option.Posix.PreprocOnly=Preprocess only (-E)
#Option.Posix.Nostdinc=Do not search system directories (-nostdinc)

Option.Posix.DefSym=Defined symbols (-D)
Option.Posix.UndefSym=Undefined symbols (-U)

Option.Posix.InclPaths=Include paths (-I)

Option.Posix.OptLevel=Optimization Level
Option.Posix.Optimize.None=None (-O0)
Option.Posix.Optimize.Optimize=Optimize (-O1)
Option.Posix.Optimize.More=Optimize more (-O2)
Option.Posix.Optimize.Most=Optimize most (-O3)
Option.Posix.Optimize.Runtime=Optimize at run-time (-O4)
Option.Posix.Optimize.Flags=Other optimization flags

Option.Posix.DebugLevel=Debug Level
Option.Posix.Debug.None=None
Option.Posix.Debug.Min=Minimal (-g1)
Option.Posix.Debug.Def=Default (-g)
Option.Posix.Debug.Max=Maximum (-g3)
Option.Posix.Debug.Other=Other debugging flags
#Option.Posix.Debug.gprof=Generate gprof information (-pg)
#Option.Posix.Debug.prof=Generate prof information (-p)

Option.Posix.Warn.Syntax=Check syntax only (-fsyntax-only)
Option.Posix.Warn.Pedandic=Pedantic (-pedantic)
Option.Posix.Warn.PedErrors=Pedantic warnings as errors (-pedantic-errors)
Option.Posix.Warn.nowarn=Inhibit all warnings (-w)
Option.Posix.Warn.allwarn=All warnings (-Wall)
Option.Posix.Warn.toerrs=Warnings as errors (-Werror)

Option.Posix.Verbose=Verbose (-v)
Option.OtherFlags=Other flags
#Option.Posix.Ansi=Support ANSI programs (-ansi)

Option.Posix.Archiver.delete=Delete files from the archive
Option.Posix.Archiver.print.contents=Print the table of contents
#Option.Posix.Linker.NoStartFiles=Do not use standard start files (-nostartfiles)
#Option.Posix.Linker.NoDefLibs=Do not use default libraries (-nodefaultlibs)
#Option.Posix.Linker.NoStdLibs=No startup or default libs (-nostdlib)
Option.Posix.Linker.Strip=Omit all debug and symbol information (-strip-all)
Option.Posix.Linker.Strip.Debug=Omit all debug information (-strip-debug)
Option.Posix.Linker.Stats=Print statistics
Option.Posix.Linker.Verbose=Verbose mode
Option.Posix.Linker.Verification=Verification pass
Option.Posix.Linker.DisableInternalize=Disable Internalize
Option.Posix.Linker.DisableOptimization=Disable Optimization
Option.Posix.Linker.DisableInhiling=Disable Inhiling
#Option.Posix.Linker.Static=No shared libraries (-static)
#Option.Posix.Linker.XLinker=Other options (-Xlinker [option])
Option.Posix.Linker.Flags=Linker flags
Option.Posix.Libs=Libraries (-l)
Option.Posix.Libsearch=Library search path (-L)
Option.Posix.UserBcs=Other bytecode files
#Option.Posix.Linker.Shared=Shared (-shared)
#Option.Posix.Linker.SOName=Shared object name (-Wl,-soname=)
#Option.Posix.Linker.Implib=Import Library name (-Wl,--out-implib=)
#Option.Posix.Linker.Defname=DEF file name (-Wl,--output-def=)
Option.Posix.Linker.link_as_library=Create a library
Option.Posix.Linker.LlvmOptions=Input/Output Options
Option.Posix.Linker.native=Create native binary (with LLVM native code generator)
Option.Posix.Linker.nativeCBackend=Create native binary (with C backend code generator)
Option.Posix.Static.Compiler.Flags=Static Compiler Flags

Option.Llvm.printStats=Print statistics
Option.Llvm.Archiver.Flags=Archiver flags
Option.Llvm.Llc.Flags=LLC flags
Option.Llvm.Llc.EmitC=Emit C code (not assembly)
Option.Llvm.Llc.Arch=Specify architecture for assembly code (x86 or sparcv9)
Option.Llvm.llc.optimization.disableExcessPrecisionOptimization=Disable optimizations that may produce excess precision for floating point
Option.Llvm.llc.optimization.disableFramePointerEliminationOptimization=Disable frame pointer elimination optimization
Option.Llvm.Lli.Flags=LLVM JIT/Interpreter flags
Option.Llvm.Lli.ForceInterpreter=Force Interpreter
Option.Llvm.Lli.disable-excess-fp-precision=Disable optimizations that may increase floating point precision
Option.Llvm.Lli.enable-finite-only-fp-math=Enable optimizations that assume only finite floating point math
Option.Llvm.Lli.enable-unsafe-fp-math=Enable optimizations that may decrease floating point precision
Option.Llvm.Lli.soft-float=Generate software floating point library calls instead of equivalent hardware instructions
Option.Llvm.Lli.disable-post-RA-scheduler=Disable scheduling after register allocation
Option.Llvm.Lli.disable-spill-fusing=Disable fusing of spill code into instructions
Option.Llvm.Lli.enable-correct-eh-support=Make the -lowerinvoke pass insert expensive, but correct, EH code
Option.Llvm.Lli.jit-enable-eh=Exception handling should be enabled in the just-in-time compiler
Option.Llvm.Assembler.Flags=Assembler flags
Option.Llvm.Assembler.warn.suppress=Suppress warnings (-W)
Option.Llvm.Assembler.version=Announce version (-v)

# Platform specific option names
#Option.Windows.Windres.OutputFormat = Output format
#Option.Windows.Windres.OutputFormat.Coff = coff (--output-format coff)
#Option.Windows.Windres.OutputFormat.RC = rc (--output-format rc)
#Option.Windows.Windres.OutputFormat.Res = res (--output-format res)
#Option.MacOSX.Linker.Shared=Shared (-dynamiclib)

# Artifact types
BuildProperty.type.name.bcexe=LLVM bytecode executable for LLI
BuildProperty.type.name.bclib=LLVM bytecode library

# Content types
ContentType.LlvmBytecodeFileName=LLVM bytecode file
#LLVM assembler file (human-readable)
ContentType.LlvmSourceFileName=LLVM
ContentType.LlvmExecutableFileName=LLVM executable
ContentType.LlvmAssemblerCode=LLVM Assembly Code

# Languages
Language.LlvmAssembly=LLVM bytecode assembly

option.name = Clang Option
page.name = LLVM
extension.name = Clang++ managed make per project SCD profile
extension.name.0 = Clang managed make per project SCD profile
extension.name.1 = LLVM-G++ managed make per project SCD profile
extension.name.2 = LLVM-GCC managed make per project SCD profile
option.tip = In this mode the linker will print additional information about the actions it takes, programs it executes, etc.
option.tip.0 = Strip all debug and symbol information from the executable to make it smaller.
option.tip.1 = Strip all debug information from the executable to make it smaller.
option.tip.2 = Run the verification pass after each of the passes to verify intermediate results.
option.tip.3 = Do not mark all symbols as internal.
option.tip.4 = Completely disable optimization.
option.tip.5 = Do not run the inlining pass. Functions will not be inlined into other functions.
option.tip.6 = Generate a native machine code executable.
option.tip.7 = Generate a native machine code executable with the LLVM C backend. Uses the C backend to generate code for the program instead of an LLVM native code generator.
option.tip.8 = Link the bitcode files together as a library, not an executable. In this mode, undefined symbols will be permitted.
option.tip.9 = Print the table of contents.
option.tip.10 = Print statistics recorded by code-generation passes.
option.tip.11 = Disable optimizations that may produce excess precision for floating point. Note that this option can dramatically slow down code on some systems (e.g. X86).
option.tip.12 = Print statistics from the code-generation passes.
enumeratedOptionValue.name = true
enumeratedOptionValue.name.0 = false
option.tip.13 = Causes lli to generate software floating point library calls instead of equivalent hardware instructions.
option.tip.14 = Causes lli to enable optimizations that may decrease floating point precision.
option.tip.15 = Disable optimizations that may increase floating point precision.
option.tip.16 = Enable optimizations that assumes only finite floating point math. That is, there is no NAN or Inf values.

preferences.toolsPaths = Clang/LLVM toolchain path
preferences.globalToolsPaths = Clang/LLVM toolchain path
properties.projectToolsPaths = Project Clang/LLVM toolchain Path