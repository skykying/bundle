package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=MigrationStats, data={transferred=int, remaining=int, total=int, duplicate=int, skipped=int, normal=int, normal-bytes=int, dirty-pages-rate=int, mbps=number, dirty-sync-count=int, postcopy-requests=int, page-size=int}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=MigrationStats, data={transferred=int, remaining=int, total=int, duplicate=int, skipped=int, normal=int, normal-bytes=int, dirty-pages-rate=int, mbps=number, dirty-sync-count=int, postcopy-requests=int, page-size=int}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class MigrationStats extends QApiType {

	
	@JsonProperty("transferred")
	@Nonnull
	public long transferred;
	
	@JsonProperty("remaining")
	@Nonnull
	public long remaining;
	
	@JsonProperty("total")
	@Nonnull
	public long total;
	
	@JsonProperty("duplicate")
	@Nonnull
	public long duplicate;
	
	@JsonProperty("skipped")
	@Nonnull
	public long skipped;
	
	@JsonProperty("normal")
	@Nonnull
	public long normal;
	
	@JsonProperty("normal-bytes")
	@Nonnull
	public long normalBytes;
	
	@JsonProperty("dirty-pages-rate")
	@Nonnull
	public long dirtyPagesRate;
	
	@JsonProperty("mbps")
	@Nonnull
	public double mbps;
	
	@JsonProperty("dirty-sync-count")
	@Nonnull
	public long dirtySyncCount;
	
	@JsonProperty("postcopy-requests")
	@Nonnull
	public long postcopyRequests;
	
	@JsonProperty("page-size")
	@Nonnull
	public long pageSize;

	@Nonnull
	public MigrationStats withTransferred(long value) {
		this.transferred = value;
		return this;
	}

	@Nonnull
	public MigrationStats withRemaining(long value) {
		this.remaining = value;
		return this;
	}

	@Nonnull
	public MigrationStats withTotal(long value) {
		this.total = value;
		return this;
	}

	@Nonnull
	public MigrationStats withDuplicate(long value) {
		this.duplicate = value;
		return this;
	}

	@Nonnull
	public MigrationStats withSkipped(long value) {
		this.skipped = value;
		return this;
	}

	@Nonnull
	public MigrationStats withNormal(long value) {
		this.normal = value;
		return this;
	}

	@Nonnull
	public MigrationStats withNormalBytes(long value) {
		this.normalBytes = value;
		return this;
	}

	@Nonnull
	public MigrationStats withDirtyPagesRate(long value) {
		this.dirtyPagesRate = value;
		return this;
	}

	@Nonnull
	public MigrationStats withMbps(double value) {
		this.mbps = value;
		return this;
	}

	@Nonnull
	public MigrationStats withDirtySyncCount(long value) {
		this.dirtySyncCount = value;
		return this;
	}

	@Nonnull
	public MigrationStats withPostcopyRequests(long value) {
		this.postcopyRequests = value;
		return this;
	}

	@Nonnull
	public MigrationStats withPageSize(long value) {
		this.pageSize = value;
		return this;
	}

	public MigrationStats() {
	}

	public MigrationStats(long transferred, long remaining, long total, long duplicate, long skipped, long normal, long normalBytes, long dirtyPagesRate, double mbps, long dirtySyncCount, long postcopyRequests, long pageSize) {
		this.transferred = transferred;
		this.remaining = remaining;
		this.total = total;
		this.duplicate = duplicate;
		this.skipped = skipped;
		this.normal = normal;
		this.normalBytes = normalBytes;
		this.dirtyPagesRate = dirtyPagesRate;
		this.mbps = mbps;
		this.dirtySyncCount = dirtySyncCount;
		this.postcopyRequests = postcopyRequests;
		this.pageSize = pageSize;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("transferred");
		names.add("remaining");
		names.add("total");
		names.add("duplicate");
		names.add("skipped");
		names.add("normal");
		names.add("normal-bytes");
		names.add("dirty-pages-rate");
		names.add("mbps");
		names.add("dirty-sync-count");
		names.add("postcopy-requests");
		names.add("page-size");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("transferred".equals(name))
			return transferred;
		if ("remaining".equals(name))
			return remaining;
		if ("total".equals(name))
			return total;
		if ("duplicate".equals(name))
			return duplicate;
		if ("skipped".equals(name))
			return skipped;
		if ("normal".equals(name))
			return normal;
		if ("normal-bytes".equals(name))
			return normalBytes;
		if ("dirty-pages-rate".equals(name))
			return dirtyPagesRate;
		if ("mbps".equals(name))
			return mbps;
		if ("dirty-sync-count".equals(name))
			return dirtySyncCount;
		if ("postcopy-requests".equals(name))
			return postcopyRequests;
		if ("page-size".equals(name))
			return pageSize;
		return super.getFieldByName(name);
	}
}
