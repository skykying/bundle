package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiAnonymousUnionDescriptor{name=BlockdevRefOrNull, data={definition=BlockdevOptions, reference=str, null=null}, innerTypes=null, fields=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevRefOrNull extends QApiType implements QApiUnion {

	// union {
	
	@JsonProperty("definition")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevOptions definition;
	
	@JsonProperty("reference")
	@JsonUnwrapped
	@CheckForNull
	public java.lang.String reference;
	
	@JsonProperty("null")
	@JsonUnwrapped
	@CheckForNull
	public java.util.Optional _null;
	// }

	@Nonnull
	public static BlockdevRefOrNull definition(@Nonnull BlockdevOptions definition) {
		BlockdevRefOrNull self = new BlockdevRefOrNull();
		self.definition = definition;
		return self;
	}

	@Nonnull
	public static BlockdevRefOrNull reference(@Nonnull java.lang.String reference) {
		BlockdevRefOrNull self = new BlockdevRefOrNull();
		self.reference = reference;
		return self;
	}

	@Nonnull
	public static BlockdevRefOrNull _null(@Nonnull java.util.Optional _null) {
		BlockdevRefOrNull self = new BlockdevRefOrNull();
		self._null = _null;
		return self;
	}

	/** This overrides @JsonUnwrapped. */
	@JsonValue
	public Object toJsonValue() {
		if (definition != null)
			return definition;
		if (reference != null)
			return reference;
		if (_null != null)
			return _null;
		return null;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("definition");
		names.add("reference");
		names.add("null");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("definition".equals(name))
			return definition;
		if ("reference".equals(name))
			return reference;
		if ("null".equals(name))
			return _null;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (definition != null)
			count++;
		if (reference != null)
			count++;
		if (_null != null)
			count++;
		return (count == 1);
	}
}
