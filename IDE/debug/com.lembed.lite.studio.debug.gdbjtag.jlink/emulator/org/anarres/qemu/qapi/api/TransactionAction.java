package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiUnionDescriptor{name=TransactionAction, discriminator=null, data={abort=Abort, block-dirty-bitmap-add=BlockDirtyBitmapAdd, block-dirty-bitmap-clear=BlockDirtyBitmap, blockdev-backup=BlockdevBackup, blockdev-snapshot=BlockdevSnapshot, blockdev-snapshot-internal-sync=BlockdevSnapshotInternal, blockdev-snapshot-sync=BlockdevSnapshotSync, drive-backup=DriveBackup}, innerTypes=null, fields=null, base=null, discriminatorField=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class TransactionAction extends QApiType implements QApiUnion {
	public static enum Discriminator {
		abort,
		block_dirty_bitmap_add,
		block_dirty_bitmap_clear,
		blockdev_backup,
		blockdev_snapshot,
		blockdev_snapshot_internal_sync,
		blockdev_snapshot_sync,
		drive_backup,
		__NONE;
	}

	
	@Nonnull
	@JsonProperty("type")
	public Discriminator type;

	@Nonnull
	public final Discriminator getType() {
		return type;
	}

	// union {
	
	@JsonProperty("abort")
	@JsonUnwrapped
	@CheckForNull
	public Abort abort;
	
	@JsonProperty("block-dirty-bitmap-add")
	@JsonUnwrapped
	@CheckForNull
	public BlockDirtyBitmapAdd blockDirtyBitmapAdd;
	
	@JsonProperty("block-dirty-bitmap-clear")
	@JsonUnwrapped
	@CheckForNull
	public BlockDirtyBitmap blockDirtyBitmapClear;
	
	@JsonProperty("blockdev-backup")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevBackup blockdevBackup;
	
	@JsonProperty("blockdev-snapshot")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevSnapshot blockdevSnapshot;
	
	@JsonProperty("blockdev-snapshot-internal-sync")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevSnapshotInternal blockdevSnapshotInternalSync;
	
	@JsonProperty("blockdev-snapshot-sync")
	@JsonUnwrapped
	@CheckForNull
	public BlockdevSnapshotSync blockdevSnapshotSync;
	
	@JsonProperty("drive-backup")
	@JsonUnwrapped
	@CheckForNull
	public DriveBackup driveBackup;
	// }

	@Nonnull
	public static TransactionAction abort(@Nonnull Abort abort) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.abort;
		self.abort = abort;
		return self;
	}

	@Nonnull
	public static TransactionAction blockDirtyBitmapAdd(@Nonnull BlockDirtyBitmapAdd blockDirtyBitmapAdd) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.block_dirty_bitmap_add;
		self.blockDirtyBitmapAdd = blockDirtyBitmapAdd;
		return self;
	}

	@Nonnull
	public static TransactionAction blockDirtyBitmapClear(@Nonnull BlockDirtyBitmap blockDirtyBitmapClear) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.block_dirty_bitmap_clear;
		self.blockDirtyBitmapClear = blockDirtyBitmapClear;
		return self;
	}

	@Nonnull
	public static TransactionAction blockdevBackup(@Nonnull BlockdevBackup blockdevBackup) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.blockdev_backup;
		self.blockdevBackup = blockdevBackup;
		return self;
	}

	@Nonnull
	public static TransactionAction blockdevSnapshot(@Nonnull BlockdevSnapshot blockdevSnapshot) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.blockdev_snapshot;
		self.blockdevSnapshot = blockdevSnapshot;
		return self;
	}

	@Nonnull
	public static TransactionAction blockdevSnapshotInternalSync(@Nonnull BlockdevSnapshotInternal blockdevSnapshotInternalSync) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.blockdev_snapshot_internal_sync;
		self.blockdevSnapshotInternalSync = blockdevSnapshotInternalSync;
		return self;
	}

	@Nonnull
	public static TransactionAction blockdevSnapshotSync(@Nonnull BlockdevSnapshotSync blockdevSnapshotSync) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.blockdev_snapshot_sync;
		self.blockdevSnapshotSync = blockdevSnapshotSync;
		return self;
	}

	@Nonnull
	public static TransactionAction driveBackup(@Nonnull DriveBackup driveBackup) {
		TransactionAction self = new TransactionAction();
		self.type = Discriminator.drive_backup;
		self.driveBackup = driveBackup;
		return self;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("abort");
		names.add("block-dirty-bitmap-add");
		names.add("block-dirty-bitmap-clear");
		names.add("blockdev-backup");
		names.add("blockdev-snapshot");
		names.add("blockdev-snapshot-internal-sync");
		names.add("blockdev-snapshot-sync");
		names.add("drive-backup");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("abort".equals(name))
			return abort;
		if ("block-dirty-bitmap-add".equals(name))
			return blockDirtyBitmapAdd;
		if ("block-dirty-bitmap-clear".equals(name))
			return blockDirtyBitmapClear;
		if ("blockdev-backup".equals(name))
			return blockdevBackup;
		if ("blockdev-snapshot".equals(name))
			return blockdevSnapshot;
		if ("blockdev-snapshot-internal-sync".equals(name))
			return blockdevSnapshotInternalSync;
		if ("blockdev-snapshot-sync".equals(name))
			return blockdevSnapshotSync;
		if ("drive-backup".equals(name))
			return driveBackup;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (abort != null)
			count++;
		if (blockDirtyBitmapAdd != null)
			count++;
		if (blockDirtyBitmapClear != null)
			count++;
		if (blockdevBackup != null)
			count++;
		if (blockdevSnapshot != null)
			count++;
		if (blockdevSnapshotInternalSync != null)
			count++;
		if (blockdevSnapshotSync != null)
			count++;
		if (driveBackup != null)
			count++;
		return (count == 1);
	}
}
