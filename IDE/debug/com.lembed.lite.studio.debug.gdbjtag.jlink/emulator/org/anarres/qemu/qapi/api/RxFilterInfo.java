package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=RxFilterInfo, data={name=str, promiscuous=bool, multicast=RxState, unicast=RxState, vlan=RxState, broadcast-allowed=bool, multicast-overflow=bool, unicast-overflow=bool, main-mac=str, vlan-table=[int], unicast-table=[str], multicast-table=[str]}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=RxFilterInfo, data={name=str, promiscuous=bool, multicast=RxState, unicast=RxState, vlan=RxState, broadcast-allowed=bool, multicast-overflow=bool, unicast-overflow=bool, main-mac=str, vlan-table=[int], unicast-table=[str], multicast-table=[str]}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class RxFilterInfo extends QApiType {

	
	@JsonProperty("name")
	@Nonnull
	public java.lang.String name;
	
	@JsonProperty("promiscuous")
	@Nonnull
	public boolean promiscuous;
	
	@JsonProperty("multicast")
	@Nonnull
	public RxState multicast;
	
	@JsonProperty("unicast")
	@Nonnull
	public RxState unicast;
	
	@JsonProperty("vlan")
	@Nonnull
	public RxState vlan;
	
	@JsonProperty("broadcast-allowed")
	@Nonnull
	public boolean broadcastAllowed;
	
	@JsonProperty("multicast-overflow")
	@Nonnull
	public boolean multicastOverflow;
	
	@JsonProperty("unicast-overflow")
	@Nonnull
	public boolean unicastOverflow;
	
	@JsonProperty("main-mac")
	@Nonnull
	public java.lang.String mainMac;
	
	@JsonProperty("vlan-table")
	@Nonnull
	public java.util.List<java.lang.Long> vlanTable;
	
	@JsonProperty("unicast-table")
	@Nonnull
	public java.util.List<java.lang.String> unicastTable;
	
	@JsonProperty("multicast-table")
	@Nonnull
	public java.util.List<java.lang.String> multicastTable;

	@Nonnull
	public RxFilterInfo withName(java.lang.String value) {
		this.name = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withPromiscuous(boolean value) {
		this.promiscuous = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withMulticast(RxState value) {
		this.multicast = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withUnicast(RxState value) {
		this.unicast = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withVlan(RxState value) {
		this.vlan = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withBroadcastAllowed(boolean value) {
		this.broadcastAllowed = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withMulticastOverflow(boolean value) {
		this.multicastOverflow = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withUnicastOverflow(boolean value) {
		this.unicastOverflow = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withMainMac(java.lang.String value) {
		this.mainMac = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withVlanTable(java.util.List<java.lang.Long> value) {
		this.vlanTable = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withUnicastTable(java.util.List<java.lang.String> value) {
		this.unicastTable = value;
		return this;
	}

	@Nonnull
	public RxFilterInfo withMulticastTable(java.util.List<java.lang.String> value) {
		this.multicastTable = value;
		return this;
	}

	public RxFilterInfo() {
	}

	public RxFilterInfo(java.lang.String name, boolean promiscuous, RxState multicast, RxState unicast, RxState vlan, boolean broadcastAllowed, boolean multicastOverflow, boolean unicastOverflow, java.lang.String mainMac, java.util.List<java.lang.Long> vlanTable, java.util.List<java.lang.String> unicastTable, java.util.List<java.lang.String> multicastTable) {
		this.name = name;
		this.promiscuous = promiscuous;
		this.multicast = multicast;
		this.unicast = unicast;
		this.vlan = vlan;
		this.broadcastAllowed = broadcastAllowed;
		this.multicastOverflow = multicastOverflow;
		this.unicastOverflow = unicastOverflow;
		this.mainMac = mainMac;
		this.vlanTable = vlanTable;
		this.unicastTable = unicastTable;
		this.multicastTable = multicastTable;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("name");
		names.add("promiscuous");
		names.add("multicast");
		names.add("unicast");
		names.add("vlan");
		names.add("broadcast-allowed");
		names.add("multicast-overflow");
		names.add("unicast-overflow");
		names.add("main-mac");
		names.add("vlan-table");
		names.add("unicast-table");
		names.add("multicast-table");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("name".equals(name))
			return name;
		if ("promiscuous".equals(name))
			return promiscuous;
		if ("multicast".equals(name))
			return multicast;
		if ("unicast".equals(name))
			return unicast;
		if ("vlan".equals(name))
			return vlan;
		if ("broadcast-allowed".equals(name))
			return broadcastAllowed;
		if ("multicast-overflow".equals(name))
			return multicastOverflow;
		if ("unicast-overflow".equals(name))
			return unicastOverflow;
		if ("main-mac".equals(name))
			return mainMac;
		if ("vlan-table".equals(name))
			return vlanTable;
		if ("unicast-table".equals(name))
			return unicastTable;
		if ("multicast-table".equals(name))
			return multicastTable;
		return super.getFieldByName(name);
	}
}
