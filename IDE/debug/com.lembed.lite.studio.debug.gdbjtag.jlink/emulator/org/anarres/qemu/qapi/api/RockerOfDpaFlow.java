package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=RockerOfDpaFlow, data={cookie=uint64, hits=uint64, key=RockerOfDpaFlowKey, mask=RockerOfDpaFlowMask, action=RockerOfDpaFlowAction}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=RockerOfDpaFlow, data={cookie=uint64, hits=uint64, key=RockerOfDpaFlowKey, mask=RockerOfDpaFlowMask, action=RockerOfDpaFlowAction}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class RockerOfDpaFlow extends QApiType {

	
	@JsonProperty("cookie")
	@Nonnull
	public long cookie;
	
	@JsonProperty("hits")
	@Nonnull
	public long hits;
	
	@JsonProperty("key")
	@Nonnull
	public RockerOfDpaFlowKey key;
	
	@JsonProperty("mask")
	@Nonnull
	public RockerOfDpaFlowMask mask;
	
	@JsonProperty("action")
	@Nonnull
	public RockerOfDpaFlowAction action;

	@Nonnull
	public RockerOfDpaFlow withCookie(long value) {
		this.cookie = value;
		return this;
	}

	@Nonnull
	public RockerOfDpaFlow withHits(long value) {
		this.hits = value;
		return this;
	}

	@Nonnull
	public RockerOfDpaFlow withKey(RockerOfDpaFlowKey value) {
		this.key = value;
		return this;
	}

	@Nonnull
	public RockerOfDpaFlow withMask(RockerOfDpaFlowMask value) {
		this.mask = value;
		return this;
	}

	@Nonnull
	public RockerOfDpaFlow withAction(RockerOfDpaFlowAction value) {
		this.action = value;
		return this;
	}

	public RockerOfDpaFlow() {
	}

	public RockerOfDpaFlow(long cookie, long hits, RockerOfDpaFlowKey key, RockerOfDpaFlowMask mask, RockerOfDpaFlowAction action) {
		this.cookie = cookie;
		this.hits = hits;
		this.key = key;
		this.mask = mask;
		this.action = action;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("cookie");
		names.add("hits");
		names.add("key");
		names.add("mask");
		names.add("action");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("cookie".equals(name))
			return cookie;
		if ("hits".equals(name))
			return hits;
		if ("key".equals(name))
			return key;
		if ("mask".equals(name))
			return mask;
		if ("action".equals(name))
			return action;
		return super.getFieldByName(name);
	}
}
