package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiAnonymousUnionDescriptor{name=Qcow2OverlapChecks, data={flags=Qcow2OverlapCheckFlags, mode=Qcow2OverlapCheckMode}, innerTypes=null, fields=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class Qcow2OverlapChecks extends QApiType implements QApiUnion {

	// union {
	
	@JsonProperty("flags")
	@JsonUnwrapped
	@CheckForNull
	public Qcow2OverlapCheckFlags flags;
	
	@JsonProperty("mode")
	@JsonUnwrapped
	@CheckForNull
	public Qcow2OverlapCheckMode mode;
	// }

	@Nonnull
	public static Qcow2OverlapChecks flags(@Nonnull Qcow2OverlapCheckFlags flags) {
		Qcow2OverlapChecks self = new Qcow2OverlapChecks();
		self.flags = flags;
		return self;
	}

	@Nonnull
	public static Qcow2OverlapChecks mode(@Nonnull Qcow2OverlapCheckMode mode) {
		Qcow2OverlapChecks self = new Qcow2OverlapChecks();
		self.mode = mode;
		return self;
	}

	/** This overrides @JsonUnwrapped. */
	@JsonValue
	public Object toJsonValue() {
		if (flags != null)
			return flags;
		if (mode != null)
			return mode;
		return null;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("flags");
		names.add("mode");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("flags".equals(name))
			return flags;
		if ("mode".equals(name))
			return mode;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (flags != null)
			count++;
		if (mode != null)
			count++;
		return (count == 1);
	}
}
