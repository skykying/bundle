package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=BlockdevOptionsSheepdog, data={server=SocketAddress, vdi=str, *snap-id=uint32, *tag=str}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=BlockdevOptionsSheepdog, data={server=SocketAddress, vdi=str, *snap-id=uint32, *tag=str}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptionsSheepdog extends QApiType {

	
	@JsonProperty("server")
	@Nonnull
	public SocketAddress server;
	
	@JsonProperty("vdi")
	@Nonnull
	public java.lang.String vdi;
	
	@JsonProperty("snap-id")
	@CheckForNull
	public java.lang.Long snapId;
	
	@JsonProperty("tag")
	@CheckForNull
	public java.lang.String tag;

	@Nonnull
	public BlockdevOptionsSheepdog withServer(SocketAddress value) {
		this.server = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsSheepdog withVdi(java.lang.String value) {
		this.vdi = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsSheepdog withSnapId(java.lang.Long value) {
		this.snapId = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsSheepdog withTag(java.lang.String value) {
		this.tag = value;
		return this;
	}

	public BlockdevOptionsSheepdog() {
	}

	public BlockdevOptionsSheepdog(SocketAddress server, java.lang.String vdi, java.lang.Long snapId, java.lang.String tag) {
		this.server = server;
		this.vdi = vdi;
		this.snapId = snapId;
		this.tag = tag;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("server");
		names.add("vdi");
		names.add("snap-id");
		names.add("tag");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("server".equals(name))
			return server;
		if ("vdi".equals(name))
			return vdi;
		if ("snap-id".equals(name))
			return snapId;
		if ("tag".equals(name))
			return tag;
		return super.getFieldByName(name);
	}
}
