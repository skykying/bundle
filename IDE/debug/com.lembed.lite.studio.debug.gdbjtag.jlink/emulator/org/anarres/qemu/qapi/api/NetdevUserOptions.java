package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=NetdevUserOptions, data={*hostname=str, *restrict=bool, *ipv4=bool, *ipv6=bool, *ip=str, *net=str, *host=str, *tftp=str, *bootfile=str, *dhcpstart=str, *dns=str, *dnssearch=[String], *ipv6-prefix=str, *ipv6-prefixlen=int, *ipv6-host=str, *ipv6-dns=str, *smb=str, *smbserver=str, *hostfwd=[String], *guestfwd=[String]}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=NetdevUserOptions, data={*hostname=str, *restrict=bool, *ipv4=bool, *ipv6=bool, *ip=str, *net=str, *host=str, *tftp=str, *bootfile=str, *dhcpstart=str, *dns=str, *dnssearch=[String], *ipv6-prefix=str, *ipv6-prefixlen=int, *ipv6-host=str, *ipv6-dns=str, *smb=str, *smbserver=str, *hostfwd=[String], *guestfwd=[String]}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class NetdevUserOptions extends QApiType {

	
	@JsonProperty("hostname")
	@CheckForNull
	public java.lang.String hostname;
	
	@JsonProperty("restrict")
	@CheckForNull
	public java.lang.Boolean restrict;
	
	@JsonProperty("ipv4")
	@CheckForNull
	public java.lang.Boolean ipv4;
	
	@JsonProperty("ipv6")
	@CheckForNull
	public java.lang.Boolean ipv6;
	
	@JsonProperty("ip")
	@CheckForNull
	public java.lang.String ip;
	
	@JsonProperty("net")
	@CheckForNull
	public java.lang.String net;
	
	@JsonProperty("host")
	@CheckForNull
	public java.lang.String host;
	
	@JsonProperty("tftp")
	@CheckForNull
	public java.lang.String tftp;
	
	@JsonProperty("bootfile")
	@CheckForNull
	public java.lang.String bootfile;
	
	@JsonProperty("dhcpstart")
	@CheckForNull
	public java.lang.String dhcpstart;
	
	@JsonProperty("dns")
	@CheckForNull
	public java.lang.String dns;
	
	@JsonProperty("dnssearch")
	@CheckForNull
	public java.util.List<String> dnssearch;
	
	@JsonProperty("ipv6-prefix")
	@CheckForNull
	public java.lang.String ipv6Prefix;
	
	@JsonProperty("ipv6-prefixlen")
	@CheckForNull
	public java.lang.Long ipv6Prefixlen;
	
	@JsonProperty("ipv6-host")
	@CheckForNull
	public java.lang.String ipv6Host;
	
	@JsonProperty("ipv6-dns")
	@CheckForNull
	public java.lang.String ipv6Dns;
	
	@JsonProperty("smb")
	@CheckForNull
	public java.lang.String smb;
	
	@JsonProperty("smbserver")
	@CheckForNull
	public java.lang.String smbserver;
	
	@JsonProperty("hostfwd")
	@CheckForNull
	public java.util.List<String> hostfwd;
	
	@JsonProperty("guestfwd")
	@CheckForNull
	public java.util.List<String> guestfwd;

	@Nonnull
	public NetdevUserOptions withHostname(java.lang.String value) {
		this.hostname = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withRestrict(java.lang.Boolean value) {
		this.restrict = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIpv4(java.lang.Boolean value) {
		this.ipv4 = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIpv6(java.lang.Boolean value) {
		this.ipv6 = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIp(java.lang.String value) {
		this.ip = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withNet(java.lang.String value) {
		this.net = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withHost(java.lang.String value) {
		this.host = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withTftp(java.lang.String value) {
		this.tftp = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withBootfile(java.lang.String value) {
		this.bootfile = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withDhcpstart(java.lang.String value) {
		this.dhcpstart = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withDns(java.lang.String value) {
		this.dns = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withDnssearch(java.util.List<String> value) {
		this.dnssearch = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIpv6Prefix(java.lang.String value) {
		this.ipv6Prefix = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIpv6Prefixlen(java.lang.Long value) {
		this.ipv6Prefixlen = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIpv6Host(java.lang.String value) {
		this.ipv6Host = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withIpv6Dns(java.lang.String value) {
		this.ipv6Dns = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withSmb(java.lang.String value) {
		this.smb = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withSmbserver(java.lang.String value) {
		this.smbserver = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withHostfwd(java.util.List<String> value) {
		this.hostfwd = value;
		return this;
	}

	@Nonnull
	public NetdevUserOptions withGuestfwd(java.util.List<String> value) {
		this.guestfwd = value;
		return this;
	}

	public NetdevUserOptions() {
	}

	public NetdevUserOptions(java.lang.String hostname, java.lang.Boolean restrict, java.lang.Boolean ipv4, java.lang.Boolean ipv6, java.lang.String ip, java.lang.String net, java.lang.String host, java.lang.String tftp, java.lang.String bootfile, java.lang.String dhcpstart, java.lang.String dns, java.util.List<String> dnssearch, java.lang.String ipv6Prefix, java.lang.Long ipv6Prefixlen, java.lang.String ipv6Host, java.lang.String ipv6Dns, java.lang.String smb, java.lang.String smbserver, java.util.List<String> hostfwd, java.util.List<String> guestfwd) {
		this.hostname = hostname;
		this.restrict = restrict;
		this.ipv4 = ipv4;
		this.ipv6 = ipv6;
		this.ip = ip;
		this.net = net;
		this.host = host;
		this.tftp = tftp;
		this.bootfile = bootfile;
		this.dhcpstart = dhcpstart;
		this.dns = dns;
		this.dnssearch = dnssearch;
		this.ipv6Prefix = ipv6Prefix;
		this.ipv6Prefixlen = ipv6Prefixlen;
		this.ipv6Host = ipv6Host;
		this.ipv6Dns = ipv6Dns;
		this.smb = smb;
		this.smbserver = smbserver;
		this.hostfwd = hostfwd;
		this.guestfwd = guestfwd;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("hostname");
		names.add("restrict");
		names.add("ipv4");
		names.add("ipv6");
		names.add("ip");
		names.add("net");
		names.add("host");
		names.add("tftp");
		names.add("bootfile");
		names.add("dhcpstart");
		names.add("dns");
		names.add("dnssearch");
		names.add("ipv6-prefix");
		names.add("ipv6-prefixlen");
		names.add("ipv6-host");
		names.add("ipv6-dns");
		names.add("smb");
		names.add("smbserver");
		names.add("hostfwd");
		names.add("guestfwd");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("hostname".equals(name))
			return hostname;
		if ("restrict".equals(name))
			return restrict;
		if ("ipv4".equals(name))
			return ipv4;
		if ("ipv6".equals(name))
			return ipv6;
		if ("ip".equals(name))
			return ip;
		if ("net".equals(name))
			return net;
		if ("host".equals(name))
			return host;
		if ("tftp".equals(name))
			return tftp;
		if ("bootfile".equals(name))
			return bootfile;
		if ("dhcpstart".equals(name))
			return dhcpstart;
		if ("dns".equals(name))
			return dns;
		if ("dnssearch".equals(name))
			return dnssearch;
		if ("ipv6-prefix".equals(name))
			return ipv6Prefix;
		if ("ipv6-prefixlen".equals(name))
			return ipv6Prefixlen;
		if ("ipv6-host".equals(name))
			return ipv6Host;
		if ("ipv6-dns".equals(name))
			return ipv6Dns;
		if ("smb".equals(name))
			return smb;
		if ("smbserver".equals(name))
			return smbserver;
		if ("hostfwd".equals(name))
			return hostfwd;
		if ("guestfwd".equals(name))
			return guestfwd;
		return super.getFieldByName(name);
	}
}
