package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=Qcow2OverlapCheckFlags, data={*template=Qcow2OverlapCheckMode, *main-header=bool, *active-l1=bool, *active-l2=bool, *refcount-table=bool, *refcount-block=bool, *snapshot-table=bool, *inactive-l1=bool, *inactive-l2=bool}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=Qcow2OverlapCheckFlags, data={*template=Qcow2OverlapCheckMode, *main-header=bool, *active-l1=bool, *active-l2=bool, *refcount-table=bool, *refcount-block=bool, *snapshot-table=bool, *inactive-l1=bool, *inactive-l2=bool}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class Qcow2OverlapCheckFlags extends QApiType {

	
	@JsonProperty("template")
	@CheckForNull
	public Qcow2OverlapCheckMode template;
	
	@JsonProperty("main-header")
	@CheckForNull
	public java.lang.Boolean mainHeader;
	
	@JsonProperty("active-l1")
	@CheckForNull
	public java.lang.Boolean activeL1;
	
	@JsonProperty("active-l2")
	@CheckForNull
	public java.lang.Boolean activeL2;
	
	@JsonProperty("refcount-table")
	@CheckForNull
	public java.lang.Boolean refcountTable;
	
	@JsonProperty("refcount-block")
	@CheckForNull
	public java.lang.Boolean refcountBlock;
	
	@JsonProperty("snapshot-table")
	@CheckForNull
	public java.lang.Boolean snapshotTable;
	
	@JsonProperty("inactive-l1")
	@CheckForNull
	public java.lang.Boolean inactiveL1;
	
	@JsonProperty("inactive-l2")
	@CheckForNull
	public java.lang.Boolean inactiveL2;

	@Nonnull
	public Qcow2OverlapCheckFlags withTemplate(Qcow2OverlapCheckMode value) {
		this.template = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withMainHeader(java.lang.Boolean value) {
		this.mainHeader = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withActiveL1(java.lang.Boolean value) {
		this.activeL1 = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withActiveL2(java.lang.Boolean value) {
		this.activeL2 = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withRefcountTable(java.lang.Boolean value) {
		this.refcountTable = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withRefcountBlock(java.lang.Boolean value) {
		this.refcountBlock = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withSnapshotTable(java.lang.Boolean value) {
		this.snapshotTable = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withInactiveL1(java.lang.Boolean value) {
		this.inactiveL1 = value;
		return this;
	}

	@Nonnull
	public Qcow2OverlapCheckFlags withInactiveL2(java.lang.Boolean value) {
		this.inactiveL2 = value;
		return this;
	}

	public Qcow2OverlapCheckFlags() {
	}

	public Qcow2OverlapCheckFlags(Qcow2OverlapCheckMode template, java.lang.Boolean mainHeader, java.lang.Boolean activeL1, java.lang.Boolean activeL2, java.lang.Boolean refcountTable, java.lang.Boolean refcountBlock, java.lang.Boolean snapshotTable, java.lang.Boolean inactiveL1, java.lang.Boolean inactiveL2) {
		this.template = template;
		this.mainHeader = mainHeader;
		this.activeL1 = activeL1;
		this.activeL2 = activeL2;
		this.refcountTable = refcountTable;
		this.refcountBlock = refcountBlock;
		this.snapshotTable = snapshotTable;
		this.inactiveL1 = inactiveL1;
		this.inactiveL2 = inactiveL2;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("template");
		names.add("main-header");
		names.add("active-l1");
		names.add("active-l2");
		names.add("refcount-table");
		names.add("refcount-block");
		names.add("snapshot-table");
		names.add("inactive-l1");
		names.add("inactive-l2");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("template".equals(name))
			return template;
		if ("main-header".equals(name))
			return mainHeader;
		if ("active-l1".equals(name))
			return activeL1;
		if ("active-l2".equals(name))
			return activeL2;
		if ("refcount-table".equals(name))
			return refcountTable;
		if ("refcount-block".equals(name))
			return refcountBlock;
		if ("snapshot-table".equals(name))
			return snapshotTable;
		if ("inactive-l1".equals(name))
			return inactiveL1;
		if ("inactive-l2".equals(name))
			return inactiveL2;
		return super.getFieldByName(name);
	}
}
