package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=GuestPanicInformationHyperV, data={arg1=uint64, arg2=uint64, arg3=uint64, arg4=uint64, arg5=uint64}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=GuestPanicInformationHyperV, data={arg1=uint64, arg2=uint64, arg3=uint64, arg4=uint64, arg5=uint64}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class GuestPanicInformationHyperV extends QApiType {

	
	@JsonProperty("arg1")
	@Nonnull
	public long arg1;
	
	@JsonProperty("arg2")
	@Nonnull
	public long arg2;
	
	@JsonProperty("arg3")
	@Nonnull
	public long arg3;
	
	@JsonProperty("arg4")
	@Nonnull
	public long arg4;
	
	@JsonProperty("arg5")
	@Nonnull
	public long arg5;

	@Nonnull
	public GuestPanicInformationHyperV withArg1(long value) {
		this.arg1 = value;
		return this;
	}

	@Nonnull
	public GuestPanicInformationHyperV withArg2(long value) {
		this.arg2 = value;
		return this;
	}

	@Nonnull
	public GuestPanicInformationHyperV withArg3(long value) {
		this.arg3 = value;
		return this;
	}

	@Nonnull
	public GuestPanicInformationHyperV withArg4(long value) {
		this.arg4 = value;
		return this;
	}

	@Nonnull
	public GuestPanicInformationHyperV withArg5(long value) {
		this.arg5 = value;
		return this;
	}

	public GuestPanicInformationHyperV() {
	}

	public GuestPanicInformationHyperV(long arg1, long arg2, long arg3, long arg4, long arg5) {
		this.arg1 = arg1;
		this.arg2 = arg2;
		this.arg3 = arg3;
		this.arg4 = arg4;
		this.arg5 = arg5;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("arg1");
		names.add("arg2");
		names.add("arg3");
		names.add("arg4");
		names.add("arg5");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("arg1".equals(name))
			return arg1;
		if ("arg2".equals(name))
			return arg2;
		if ("arg3".equals(name))
			return arg3;
		if ("arg4".equals(name))
			return arg4;
		if ("arg5".equals(name))
			return arg5;
		return super.getFieldByName(name);
	}
}
