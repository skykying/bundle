package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=BlockDirtyInfo, data={*name=str, count=int, granularity=uint32, status=DirtyBitmapStatus}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=BlockDirtyInfo, data={*name=str, count=int, granularity=uint32, status=DirtyBitmapStatus}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockDirtyInfo extends QApiType {

	
	@JsonProperty("name")
	@CheckForNull
	public java.lang.String name;
	
	@JsonProperty("count")
	@Nonnull
	public long count;
	
	@JsonProperty("granularity")
	@Nonnull
	public long granularity;
	
	@JsonProperty("status")
	@Nonnull
	public DirtyBitmapStatus status;

	@Nonnull
	public BlockDirtyInfo withName(java.lang.String value) {
		this.name = value;
		return this;
	}

	@Nonnull
	public BlockDirtyInfo withCount(long value) {
		this.count = value;
		return this;
	}

	@Nonnull
	public BlockDirtyInfo withGranularity(long value) {
		this.granularity = value;
		return this;
	}

	@Nonnull
	public BlockDirtyInfo withStatus(DirtyBitmapStatus value) {
		this.status = value;
		return this;
	}

	public BlockDirtyInfo() {
	}

	public BlockDirtyInfo(java.lang.String name, long count, long granularity, DirtyBitmapStatus status) {
		this.name = name;
		this.count = count;
		this.granularity = granularity;
		this.status = status;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("name");
		names.add("count");
		names.add("granularity");
		names.add("status");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("name".equals(name))
			return name;
		if ("count".equals(name))
			return count;
		if ("granularity".equals(name))
			return granularity;
		if ("status".equals(name))
			return status;
		return super.getFieldByName(name);
	}
}
