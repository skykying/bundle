package org.anarres.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;
import org.anarres.qemu.qapi.common.*;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=BlockdevOptionsIscsi, data={transport=IscsiTransport, portal=str, target=str, *lun=int, *user=str, *password-secret=str, *initiator-name=str, *header-digest=IscsiHeaderDigest, *timeout=int}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=BlockdevOptionsIscsi, data={transport=IscsiTransport, portal=str, target=str, *lun=int, *user=str, *password-secret=str, *initiator-name=str, *header-digest=IscsiHeaderDigest, *timeout=int}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptionsIscsi extends QApiType {

	
	@JsonProperty("transport")
	@Nonnull
	public IscsiTransport transport;
	
	@JsonProperty("portal")
	@Nonnull
	public java.lang.String portal;
	
	@JsonProperty("target")
	@Nonnull
	public java.lang.String target;
	
	@JsonProperty("lun")
	@CheckForNull
	public java.lang.Long lun;
	
	@JsonProperty("user")
	@CheckForNull
	public java.lang.String user;
	
	@JsonProperty("password-secret")
	@CheckForNull
	public java.lang.String passwordSecret;
	
	@JsonProperty("initiator-name")
	@CheckForNull
	public java.lang.String initiatorName;
	
	@JsonProperty("header-digest")
	@CheckForNull
	public IscsiHeaderDigest headerDigest;
	
	@JsonProperty("timeout")
	@CheckForNull
	public java.lang.Long timeout;

	@Nonnull
	public BlockdevOptionsIscsi withTransport(IscsiTransport value) {
		this.transport = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withPortal(java.lang.String value) {
		this.portal = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withTarget(java.lang.String value) {
		this.target = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withLun(java.lang.Long value) {
		this.lun = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withUser(java.lang.String value) {
		this.user = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withPasswordSecret(java.lang.String value) {
		this.passwordSecret = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withInitiatorName(java.lang.String value) {
		this.initiatorName = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withHeaderDigest(IscsiHeaderDigest value) {
		this.headerDigest = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsIscsi withTimeout(java.lang.Long value) {
		this.timeout = value;
		return this;
	}

	public BlockdevOptionsIscsi() {
	}

	public BlockdevOptionsIscsi(IscsiTransport transport, java.lang.String portal, java.lang.String target, java.lang.Long lun, java.lang.String user, java.lang.String passwordSecret, java.lang.String initiatorName, IscsiHeaderDigest headerDigest, java.lang.Long timeout) {
		this.transport = transport;
		this.portal = portal;
		this.target = target;
		this.lun = lun;
		this.user = user;
		this.passwordSecret = passwordSecret;
		this.initiatorName = initiatorName;
		this.headerDigest = headerDigest;
		this.timeout = timeout;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("transport");
		names.add("portal");
		names.add("target");
		names.add("lun");
		names.add("user");
		names.add("password-secret");
		names.add("initiator-name");
		names.add("header-digest");
		names.add("timeout");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("transport".equals(name))
			return transport;
		if ("portal".equals(name))
			return portal;
		if ("target".equals(name))
			return target;
		if ("lun".equals(name))
			return lun;
		if ("user".equals(name))
			return user;
		if ("password-secret".equals(name))
			return passwordSecret;
		if ("initiator-name".equals(name))
			return initiatorName;
		if ("header-digest".equals(name))
			return headerDigest;
		if ("timeout".equals(name))
			return timeout;
		return super.getFieldByName(name);
	}
}
