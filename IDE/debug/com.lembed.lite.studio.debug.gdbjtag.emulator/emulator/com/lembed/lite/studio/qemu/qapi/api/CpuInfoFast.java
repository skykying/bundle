package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiUnionDescriptor{name=CpuInfoFast, discriminator=arch, data={x86=CpuInfoOther, sparc=CpuInfoOther, ppc=CpuInfoOther, mips=CpuInfoOther, tricore=CpuInfoOther, s390=CpuInfoS390, riscv=CpuInfoRISCV, other=CpuInfoOther}, innerTypes=null, fields=null, base={cpu-index=int, qom-path=str, thread-id=int, *props=CpuInstanceProperties, arch=CpuInfoArch}, discriminatorField=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class CpuInfoFast extends CpuInfoFastBase implements QApiUnion {

	// union {
	
	@JsonProperty("x86")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther x86;
	
	@JsonProperty("sparc")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther sparc;
	
	@JsonProperty("ppc")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther ppc;
	
	@JsonProperty("mips")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther mips;
	
	@JsonProperty("tricore")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther tricore;
	
	@JsonProperty("s390")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoS390 s390;
	
	@JsonProperty("riscv")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoRISCV riscv;
	
	@JsonProperty("other")
	@JsonUnwrapped
	@CheckForNull
	public CpuInfoOther other;
	// }

	@Nonnull
	public static CpuInfoFast x86(@Nonnull CpuInfoOther x86) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.x86;
		self.x86 = x86;
		return self;
	}

	@Nonnull
	public static CpuInfoFast sparc(@Nonnull CpuInfoOther sparc) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.sparc;
		self.sparc = sparc;
		return self;
	}

	@Nonnull
	public static CpuInfoFast ppc(@Nonnull CpuInfoOther ppc) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.ppc;
		self.ppc = ppc;
		return self;
	}

	@Nonnull
	public static CpuInfoFast mips(@Nonnull CpuInfoOther mips) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.mips;
		self.mips = mips;
		return self;
	}

	@Nonnull
	public static CpuInfoFast tricore(@Nonnull CpuInfoOther tricore) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.tricore;
		self.tricore = tricore;
		return self;
	}

	@Nonnull
	public static CpuInfoFast s390(@Nonnull CpuInfoS390 s390) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.s390;
		self.s390 = s390;
		return self;
	}

	@Nonnull
	public static CpuInfoFast riscv(@Nonnull CpuInfoRISCV riscv) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.riscv;
		self.riscv = riscv;
		return self;
	}

	@Nonnull
	public static CpuInfoFast other(@Nonnull CpuInfoOther other) {
		CpuInfoFast self = new CpuInfoFast();
		self.arch = CpuInfoArch.other;
		self.other = other;
		return self;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("x86");
		names.add("sparc");
		names.add("ppc");
		names.add("mips");
		names.add("tricore");
		names.add("s390");
		names.add("riscv");
		names.add("other");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("x86".equals(name))
			return x86;
		if ("sparc".equals(name))
			return sparc;
		if ("ppc".equals(name))
			return ppc;
		if ("mips".equals(name))
			return mips;
		if ("tricore".equals(name))
			return tricore;
		if ("s390".equals(name))
			return s390;
		if ("riscv".equals(name))
			return riscv;
		if ("other".equals(name))
			return other;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (x86 != null)
			count++;
		if (sparc != null)
			count++;
		if (ppc != null)
			count++;
		if (mips != null)
			count++;
		if (tricore != null)
			count++;
		if (s390 != null)
			count++;
		if (riscv != null)
			count++;
		if (other != null)
			count++;
		return (count == 1);
	}
}
