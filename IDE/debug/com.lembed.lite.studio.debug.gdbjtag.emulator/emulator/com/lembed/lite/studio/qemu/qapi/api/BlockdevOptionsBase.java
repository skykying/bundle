package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiTypeDescriptor{name=BlockdevOptionsBase, data={driver=BlockdevDriver, *node-name=str, *discard=BlockdevDiscardOptions, *cache=BlockdevCacheOptions, *read-only=bool, *force-share=bool, *detect-zeroes=BlockdevDetectZeroesOptions}, innerTypes=null}</pre>
 */
// QApiTypeDescriptor{name=BlockdevOptionsBase, data={driver=BlockdevDriver, *node-name=str, *discard=BlockdevDiscardOptions, *cache=BlockdevCacheOptions, *read-only=bool, *force-share=bool, *detect-zeroes=BlockdevDetectZeroesOptions}, innerTypes=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptionsBase extends QApiType {

	
	@JsonProperty("driver")
	@Nonnull
	public BlockdevDriver driver;
	
	@JsonProperty("node-name")
	@CheckForNull
	public java.lang.String nodeName;
	
	@JsonProperty("discard")
	@CheckForNull
	public BlockdevDiscardOptions discard;
	
	@JsonProperty("cache")
	@CheckForNull
	public BlockdevCacheOptions cache;
	
	@JsonProperty("read-only")
	@CheckForNull
	public java.lang.Boolean readOnly;
	
	@JsonProperty("force-share")
	@CheckForNull
	public java.lang.Boolean forceShare;
	
	@JsonProperty("detect-zeroes")
	@CheckForNull
	public BlockdevDetectZeroesOptions detectZeroes;

	@Nonnull
	public BlockdevOptionsBase withDriver(BlockdevDriver value) {
		this.driver = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBase withNodeName(java.lang.String value) {
		this.nodeName = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBase withDiscard(BlockdevDiscardOptions value) {
		this.discard = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBase withCache(BlockdevCacheOptions value) {
		this.cache = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBase withReadOnly(java.lang.Boolean value) {
		this.readOnly = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBase withForceShare(java.lang.Boolean value) {
		this.forceShare = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBase withDetectZeroes(BlockdevDetectZeroesOptions value) {
		this.detectZeroes = value;
		return this;
	}

	public BlockdevOptionsBase() {
	}

	public BlockdevOptionsBase(BlockdevDriver driver, java.lang.String nodeName, BlockdevDiscardOptions discard, BlockdevCacheOptions cache, java.lang.Boolean readOnly, java.lang.Boolean forceShare, BlockdevDetectZeroesOptions detectZeroes) {
		this.driver = driver;
		this.nodeName = nodeName;
		this.discard = discard;
		this.cache = cache;
		this.readOnly = readOnly;
		this.forceShare = forceShare;
		this.detectZeroes = detectZeroes;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("driver");
		names.add("node-name");
		names.add("discard");
		names.add("cache");
		names.add("read-only");
		names.add("force-share");
		names.add("detect-zeroes");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("driver".equals(name))
			return driver;
		if ("node-name".equals(name))
			return nodeName;
		if ("discard".equals(name))
			return discard;
		if ("cache".equals(name))
			return cache;
		if ("read-only".equals(name))
			return readOnly;
		if ("force-share".equals(name))
			return forceShare;
		if ("detect-zeroes".equals(name))
			return detectZeroes;
		return super.getFieldByName(name);
	}
}
