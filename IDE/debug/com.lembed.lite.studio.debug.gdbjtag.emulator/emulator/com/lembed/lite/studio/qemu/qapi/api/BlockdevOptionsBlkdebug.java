package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=BlockdevOptionsBlkdebug, data={image=BlockdevRef, *config=str, *align=int, *max-transfer=int32, *opt-write-zero=int32, *max-write-zero=int32, *opt-discard=int32, *max-discard=int32, *inject-error=[BlkdebugInjectErrorOptions], *set-state=[BlkdebugSetStateOptions]}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=BlockdevOptionsBlkdebug, data={image=BlockdevRef, *config=str, *align=int, *max-transfer=int32, *opt-write-zero=int32, *max-write-zero=int32, *opt-discard=int32, *max-discard=int32, *inject-error=[BlkdebugInjectErrorOptions], *set-state=[BlkdebugSetStateOptions]}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptionsBlkdebug extends QApiType {

	
	@JsonProperty("image")
	@Nonnull
	public BlockdevRef image;
	
	@JsonProperty("config")
	@CheckForNull
	public java.lang.String config;
	
	@JsonProperty("align")
	@CheckForNull
	public java.lang.Long align;
	
	@JsonProperty("max-transfer")
	@CheckForNull
	public java.lang.Integer maxTransfer;
	
	@JsonProperty("opt-write-zero")
	@CheckForNull
	public java.lang.Integer optWriteZero;
	
	@JsonProperty("max-write-zero")
	@CheckForNull
	public java.lang.Integer maxWriteZero;
	
	@JsonProperty("opt-discard")
	@CheckForNull
	public java.lang.Integer optDiscard;
	
	@JsonProperty("max-discard")
	@CheckForNull
	public java.lang.Integer maxDiscard;
	
	@JsonProperty("inject-error")
	@CheckForNull
	public java.util.List<BlkdebugInjectErrorOptions> injectError;
	
	@JsonProperty("set-state")
	@CheckForNull
	public java.util.List<BlkdebugSetStateOptions> setState;

	@Nonnull
	public BlockdevOptionsBlkdebug withImage(BlockdevRef value) {
		this.image = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withConfig(java.lang.String value) {
		this.config = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withAlign(java.lang.Long value) {
		this.align = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withMaxTransfer(java.lang.Integer value) {
		this.maxTransfer = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withOptWriteZero(java.lang.Integer value) {
		this.optWriteZero = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withMaxWriteZero(java.lang.Integer value) {
		this.maxWriteZero = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withOptDiscard(java.lang.Integer value) {
		this.optDiscard = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withMaxDiscard(java.lang.Integer value) {
		this.maxDiscard = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withInjectError(java.util.List<BlkdebugInjectErrorOptions> value) {
		this.injectError = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsBlkdebug withSetState(java.util.List<BlkdebugSetStateOptions> value) {
		this.setState = value;
		return this;
	}

	public BlockdevOptionsBlkdebug() {
	}

	public BlockdevOptionsBlkdebug(BlockdevRef image, java.lang.String config, java.lang.Long align, java.lang.Integer maxTransfer, java.lang.Integer optWriteZero, java.lang.Integer maxWriteZero, java.lang.Integer optDiscard, java.lang.Integer maxDiscard, java.util.List<BlkdebugInjectErrorOptions> injectError, java.util.List<BlkdebugSetStateOptions> setState) {
		this.image = image;
		this.config = config;
		this.align = align;
		this.maxTransfer = maxTransfer;
		this.optWriteZero = optWriteZero;
		this.maxWriteZero = maxWriteZero;
		this.optDiscard = optDiscard;
		this.maxDiscard = maxDiscard;
		this.injectError = injectError;
		this.setState = setState;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("image");
		names.add("config");
		names.add("align");
		names.add("max-transfer");
		names.add("opt-write-zero");
		names.add("max-write-zero");
		names.add("opt-discard");
		names.add("max-discard");
		names.add("inject-error");
		names.add("set-state");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("image".equals(name))
			return image;
		if ("config".equals(name))
			return config;
		if ("align".equals(name))
			return align;
		if ("max-transfer".equals(name))
			return maxTransfer;
		if ("opt-write-zero".equals(name))
			return optWriteZero;
		if ("max-write-zero".equals(name))
			return maxWriteZero;
		if ("opt-discard".equals(name))
			return optDiscard;
		if ("max-discard".equals(name))
			return maxDiscard;
		if ("inject-error".equals(name))
			return injectError;
		if ("set-state".equals(name))
			return setState;
		return super.getFieldByName(name);
	}
}
