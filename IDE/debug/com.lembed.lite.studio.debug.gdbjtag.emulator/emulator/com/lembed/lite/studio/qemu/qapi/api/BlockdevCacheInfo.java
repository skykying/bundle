package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=BlockdevCacheInfo, data={writeback=bool, direct=bool, no-flush=bool}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=BlockdevCacheInfo, data={writeback=bool, direct=bool, no-flush=bool}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevCacheInfo extends QApiType {

	
	@JsonProperty("writeback")
	@Nonnull
	public boolean writeback;
	
	@JsonProperty("direct")
	@Nonnull
	public boolean direct;
	
	@JsonProperty("no-flush")
	@Nonnull
	public boolean noFlush;

	@Nonnull
	public BlockdevCacheInfo withWriteback(boolean value) {
		this.writeback = value;
		return this;
	}

	@Nonnull
	public BlockdevCacheInfo withDirect(boolean value) {
		this.direct = value;
		return this;
	}

	@Nonnull
	public BlockdevCacheInfo withNoFlush(boolean value) {
		this.noFlush = value;
		return this;
	}

	public BlockdevCacheInfo() {
	}

	public BlockdevCacheInfo(boolean writeback, boolean direct, boolean noFlush) {
		this.writeback = writeback;
		this.direct = direct;
		this.noFlush = noFlush;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("writeback");
		names.add("direct");
		names.add("no-flush");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("writeback".equals(name))
			return writeback;
		if ("direct".equals(name))
			return direct;
		if ("no-flush".equals(name))
			return noFlush;
		return super.getFieldByName(name);
	}
}
