package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiCommandDescriptor{name=block-commit, returns=null, data={*job-id=str, device=str, *base=str, *top=str, *backing-file=str, *speed=int, *filter-node-name=str}}</pre>
 */
// QApiCommandDescriptor{name=block-commit, returns=null, data={*job-id=str, device=str, *base=str, *top=str, *backing-file=str, *speed=int, *filter-node-name=str}}
public class BlockCommitCommand extends QApiCommand<BlockCommitCommand.Arguments, BlockCommitCommand.Response> {
	/** Compound arguments to a BlockCommitCommand. */
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public static class Arguments {

		
		@JsonProperty("job-id")
		@CheckForNull
		public java.lang.String jobId;
		
		@JsonProperty("device")
		@Nonnull
		public java.lang.String device;
		
		@JsonProperty("base")
		@CheckForNull
		public java.lang.String base;
		
		@JsonProperty("top")
		@CheckForNull
		public java.lang.String top;
		
		@JsonProperty("backing-file")
		@CheckForNull
		public java.lang.String backingFile;
		
		@JsonProperty("speed")
		@CheckForNull
		public java.lang.Long speed;
		
		@JsonProperty("filter-node-name")
		@CheckForNull
		public java.lang.String filterNodeName;

		public Arguments() {
		}

		public Arguments(java.lang.String jobId, java.lang.String device, java.lang.String base, java.lang.String top, java.lang.String backingFile, java.lang.Long speed, java.lang.String filterNodeName) {
			this.jobId = jobId;
			this.device = device;
			this.base = base;
			this.top = top;
			this.backingFile = backingFile;
			this.speed = speed;
			this.filterNodeName = filterNodeName;
		}
	}

	/** Response to a BlockCommitCommand. */
	public static class Response extends QApiResponse<java.lang.Void> {
	}

	/** Constructs a new BlockCommitCommand. */
	public BlockCommitCommand(@Nonnull BlockCommitCommand.Arguments argument) {
		super("block-commit", Response.class, argument);
	}

	/** Constructs a new BlockCommitCommand. */
	public BlockCommitCommand(java.lang.String jobId, java.lang.String device, java.lang.String base, java.lang.String top, java.lang.String backingFile, java.lang.Long speed, java.lang.String filterNodeName) {
		this(new Arguments(jobId, device, base, top, backingFile, speed, filterNodeName));
	}
}
