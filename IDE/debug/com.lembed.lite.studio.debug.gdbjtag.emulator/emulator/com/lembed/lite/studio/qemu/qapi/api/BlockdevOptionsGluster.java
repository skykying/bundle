package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=BlockdevOptionsGluster, data={volume=str, path=str, server=[SocketAddress], *debug=int, *logfile=str}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=BlockdevOptionsGluster, data={volume=str, path=str, server=[SocketAddress], *debug=int, *logfile=str}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class BlockdevOptionsGluster extends QApiType {

	
	@JsonProperty("volume")
	@Nonnull
	public java.lang.String volume;
	
	@JsonProperty("path")
	@Nonnull
	public java.lang.String path;
	
	@JsonProperty("server")
	@Nonnull
	public java.util.List<SocketAddress> server;
	
	@JsonProperty("debug")
	@CheckForNull
	public java.lang.Long debug;
	
	@JsonProperty("logfile")
	@CheckForNull
	public java.lang.String logfile;

	@Nonnull
	public BlockdevOptionsGluster withVolume(java.lang.String value) {
		this.volume = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsGluster withPath(java.lang.String value) {
		this.path = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsGluster withServer(java.util.List<SocketAddress> value) {
		this.server = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsGluster withDebug(java.lang.Long value) {
		this.debug = value;
		return this;
	}

	@Nonnull
	public BlockdevOptionsGluster withLogfile(java.lang.String value) {
		this.logfile = value;
		return this;
	}

	public BlockdevOptionsGluster() {
	}

	public BlockdevOptionsGluster(java.lang.String volume, java.lang.String path, java.util.List<SocketAddress> server, java.lang.Long debug, java.lang.String logfile) {
		this.volume = volume;
		this.path = path;
		this.server = server;
		this.debug = debug;
		this.logfile = logfile;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("volume");
		names.add("path");
		names.add("server");
		names.add("debug");
		names.add("logfile");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("volume".equals(name))
			return volume;
		if ("path".equals(name))
			return path;
		if ("server".equals(name))
			return server;
		if ("debug".equals(name))
			return debug;
		if ("logfile".equals(name))
			return logfile;
		return super.getFieldByName(name);
	}
}
