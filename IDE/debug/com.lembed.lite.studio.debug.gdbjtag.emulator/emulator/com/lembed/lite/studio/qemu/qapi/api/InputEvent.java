package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiUnionDescriptor{name=InputEvent, discriminator=null, data={key=InputKeyEvent, btn=InputBtnEvent, rel=InputMoveEvent, abs=InputMoveEvent}, innerTypes=null, fields=null, base=null, discriminatorField=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class InputEvent extends QApiType implements QApiUnion {
	public static enum Discriminator {
		key,
		btn,
		rel,
		abs,
		__NONE;
	}

	
	@Nonnull
	@JsonProperty("type")
	public Discriminator type;

	@Nonnull
	public final Discriminator getType() {
		return type;
	}

	// union {
	
	@JsonProperty("key")
	@JsonUnwrapped
	@CheckForNull
	public InputKeyEvent key;
	
	@JsonProperty("btn")
	@JsonUnwrapped
	@CheckForNull
	public InputBtnEvent btn;
	
	@JsonProperty("rel")
	@JsonUnwrapped
	@CheckForNull
	public InputMoveEvent rel;
	
	@JsonProperty("abs")
	@JsonUnwrapped
	@CheckForNull
	public InputMoveEvent abs;
	// }

	@Nonnull
	public static InputEvent key(@Nonnull InputKeyEvent key) {
		InputEvent self = new InputEvent();
		self.type = Discriminator.key;
		self.key = key;
		return self;
	}

	@Nonnull
	public static InputEvent btn(@Nonnull InputBtnEvent btn) {
		InputEvent self = new InputEvent();
		self.type = Discriminator.btn;
		self.btn = btn;
		return self;
	}

	@Nonnull
	public static InputEvent rel(@Nonnull InputMoveEvent rel) {
		InputEvent self = new InputEvent();
		self.type = Discriminator.rel;
		self.rel = rel;
		return self;
	}

	@Nonnull
	public static InputEvent abs(@Nonnull InputMoveEvent abs) {
		InputEvent self = new InputEvent();
		self.type = Discriminator.abs;
		self.abs = abs;
		return self;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("key");
		names.add("btn");
		names.add("rel");
		names.add("abs");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("key".equals(name))
			return key;
		if ("btn".equals(name))
			return btn;
		if ("rel".equals(name))
			return rel;
		if ("abs".equals(name))
			return abs;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (key != null)
			count++;
		if (btn != null)
			count++;
		if (rel != null)
			count++;
		if (abs != null)
			count++;
		return (count == 1);
	}
}
