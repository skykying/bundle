package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=ImageCheck, data={filename=str, format=str, check-errors=int, *image-end-offset=int, *corruptions=int, *leaks=int, *corruptions-fixed=int, *leaks-fixed=int, *total-clusters=int, *allocated-clusters=int, *fragmented-clusters=int, *compressed-clusters=int}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=ImageCheck, data={filename=str, format=str, check-errors=int, *image-end-offset=int, *corruptions=int, *leaks=int, *corruptions-fixed=int, *leaks-fixed=int, *total-clusters=int, *allocated-clusters=int, *fragmented-clusters=int, *compressed-clusters=int}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ImageCheck extends QApiType {

	
	@JsonProperty("filename")
	@Nonnull
	public java.lang.String filename;
	
	@JsonProperty("format")
	@Nonnull
	public java.lang.String format;
	
	@JsonProperty("check-errors")
	@Nonnull
	public long checkErrors;
	
	@JsonProperty("image-end-offset")
	@CheckForNull
	public java.lang.Long imageEndOffset;
	
	@JsonProperty("corruptions")
	@CheckForNull
	public java.lang.Long corruptions;
	
	@JsonProperty("leaks")
	@CheckForNull
	public java.lang.Long leaks;
	
	@JsonProperty("corruptions-fixed")
	@CheckForNull
	public java.lang.Long corruptionsFixed;
	
	@JsonProperty("leaks-fixed")
	@CheckForNull
	public java.lang.Long leaksFixed;
	
	@JsonProperty("total-clusters")
	@CheckForNull
	public java.lang.Long totalClusters;
	
	@JsonProperty("allocated-clusters")
	@CheckForNull
	public java.lang.Long allocatedClusters;
	
	@JsonProperty("fragmented-clusters")
	@CheckForNull
	public java.lang.Long fragmentedClusters;
	
	@JsonProperty("compressed-clusters")
	@CheckForNull
	public java.lang.Long compressedClusters;

	@Nonnull
	public ImageCheck withFilename(java.lang.String value) {
		this.filename = value;
		return this;
	}

	@Nonnull
	public ImageCheck withFormat(java.lang.String value) {
		this.format = value;
		return this;
	}

	@Nonnull
	public ImageCheck withCheckErrors(long value) {
		this.checkErrors = value;
		return this;
	}

	@Nonnull
	public ImageCheck withImageEndOffset(java.lang.Long value) {
		this.imageEndOffset = value;
		return this;
	}

	@Nonnull
	public ImageCheck withCorruptions(java.lang.Long value) {
		this.corruptions = value;
		return this;
	}

	@Nonnull
	public ImageCheck withLeaks(java.lang.Long value) {
		this.leaks = value;
		return this;
	}

	@Nonnull
	public ImageCheck withCorruptionsFixed(java.lang.Long value) {
		this.corruptionsFixed = value;
		return this;
	}

	@Nonnull
	public ImageCheck withLeaksFixed(java.lang.Long value) {
		this.leaksFixed = value;
		return this;
	}

	@Nonnull
	public ImageCheck withTotalClusters(java.lang.Long value) {
		this.totalClusters = value;
		return this;
	}

	@Nonnull
	public ImageCheck withAllocatedClusters(java.lang.Long value) {
		this.allocatedClusters = value;
		return this;
	}

	@Nonnull
	public ImageCheck withFragmentedClusters(java.lang.Long value) {
		this.fragmentedClusters = value;
		return this;
	}

	@Nonnull
	public ImageCheck withCompressedClusters(java.lang.Long value) {
		this.compressedClusters = value;
		return this;
	}

	public ImageCheck() {
	}

	public ImageCheck(java.lang.String filename, java.lang.String format, long checkErrors, java.lang.Long imageEndOffset, java.lang.Long corruptions, java.lang.Long leaks, java.lang.Long corruptionsFixed, java.lang.Long leaksFixed, java.lang.Long totalClusters, java.lang.Long allocatedClusters, java.lang.Long fragmentedClusters, java.lang.Long compressedClusters) {
		this.filename = filename;
		this.format = format;
		this.checkErrors = checkErrors;
		this.imageEndOffset = imageEndOffset;
		this.corruptions = corruptions;
		this.leaks = leaks;
		this.corruptionsFixed = corruptionsFixed;
		this.leaksFixed = leaksFixed;
		this.totalClusters = totalClusters;
		this.allocatedClusters = allocatedClusters;
		this.fragmentedClusters = fragmentedClusters;
		this.compressedClusters = compressedClusters;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("filename");
		names.add("format");
		names.add("check-errors");
		names.add("image-end-offset");
		names.add("corruptions");
		names.add("leaks");
		names.add("corruptions-fixed");
		names.add("leaks-fixed");
		names.add("total-clusters");
		names.add("allocated-clusters");
		names.add("fragmented-clusters");
		names.add("compressed-clusters");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("filename".equals(name))
			return filename;
		if ("format".equals(name))
			return format;
		if ("check-errors".equals(name))
			return checkErrors;
		if ("image-end-offset".equals(name))
			return imageEndOffset;
		if ("corruptions".equals(name))
			return corruptions;
		if ("leaks".equals(name))
			return leaks;
		if ("corruptions-fixed".equals(name))
			return corruptionsFixed;
		if ("leaks-fixed".equals(name))
			return leaksFixed;
		if ("total-clusters".equals(name))
			return totalClusters;
		if ("allocated-clusters".equals(name))
			return allocatedClusters;
		if ("fragmented-clusters".equals(name))
			return fragmentedClusters;
		if ("compressed-clusters".equals(name))
			return compressedClusters;
		return super.getFieldByName(name);
	}
}
