package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiAnonymousUnionDescriptor{name=StrOrNull, data={s=str, n=null}, innerTypes=null, fields=null}</pre>
 */
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class StrOrNull extends QApiType implements QApiUnion {

	// union {
	
	@JsonProperty("s")
	@JsonUnwrapped
	@CheckForNull
	public java.lang.String s;
	
	@JsonProperty("n")
	@JsonUnwrapped
	@CheckForNull
	public java.util.Optional n;
	// }

	@Nonnull
	public static StrOrNull s(@Nonnull java.lang.String s) {
		StrOrNull self = new StrOrNull();
		self.s = s;
		return self;
	}

	@Nonnull
	public static StrOrNull n(@Nonnull java.util.Optional n) {
		StrOrNull self = new StrOrNull();
		self.n = n;
		return self;
	}

	/** This overrides @JsonUnwrapped. */
	@JsonValue
	public Object toJsonValue() {
		if (s != null)
			return s;
		if (n != null)
			return n;
		return null;
	}

	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("s");
		names.add("n");
		return names;
	}

	@JsonIgnore
	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("s".equals(name))
			return s;
		if ("n".equals(name))
			return n;
		return super.getFieldByName(name);
	}

	@JsonIgnore
	public boolean isValidUnion() {
		int count = 0;
		if (s != null)
			count++;
		if (n != null)
			count++;
		return (count == 1);
	}
}
