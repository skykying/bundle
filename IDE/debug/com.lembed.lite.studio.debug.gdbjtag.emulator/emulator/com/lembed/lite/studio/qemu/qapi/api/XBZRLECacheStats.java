package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=XBZRLECacheStats, data={cache-size=int, bytes=int, pages=int, cache-miss=int, cache-miss-rate=number, overflow=int}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=XBZRLECacheStats, data={cache-size=int, bytes=int, pages=int, cache-miss=int, cache-miss-rate=number, overflow=int}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class XBZRLECacheStats extends QApiType {

	
	@JsonProperty("cache-size")
	@Nonnull
	public long cacheSize;
	
	@JsonProperty("bytes")
	@Nonnull
	public long bytes;
	
	@JsonProperty("pages")
	@Nonnull
	public long pages;
	
	@JsonProperty("cache-miss")
	@Nonnull
	public long cacheMiss;
	
	@JsonProperty("cache-miss-rate")
	@Nonnull
	public double cacheMissRate;
	
	@JsonProperty("overflow")
	@Nonnull
	public long overflow;

	@Nonnull
	public XBZRLECacheStats withCacheSize(long value) {
		this.cacheSize = value;
		return this;
	}

	@Nonnull
	public XBZRLECacheStats withBytes(long value) {
		this.bytes = value;
		return this;
	}

	@Nonnull
	public XBZRLECacheStats withPages(long value) {
		this.pages = value;
		return this;
	}

	@Nonnull
	public XBZRLECacheStats withCacheMiss(long value) {
		this.cacheMiss = value;
		return this;
	}

	@Nonnull
	public XBZRLECacheStats withCacheMissRate(double value) {
		this.cacheMissRate = value;
		return this;
	}

	@Nonnull
	public XBZRLECacheStats withOverflow(long value) {
		this.overflow = value;
		return this;
	}

	public XBZRLECacheStats() {
	}

	public XBZRLECacheStats(long cacheSize, long bytes, long pages, long cacheMiss, double cacheMissRate, long overflow) {
		this.cacheSize = cacheSize;
		this.bytes = bytes;
		this.pages = pages;
		this.cacheMiss = cacheMiss;
		this.cacheMissRate = cacheMissRate;
		this.overflow = overflow;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("cache-size");
		names.add("bytes");
		names.add("pages");
		names.add("cache-miss");
		names.add("cache-miss-rate");
		names.add("overflow");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("cache-size".equals(name))
			return cacheSize;
		if ("bytes".equals(name))
			return bytes;
		if ("pages".equals(name))
			return pages;
		if ("cache-miss".equals(name))
			return cacheMiss;
		if ("cache-miss-rate".equals(name))
			return cacheMissRate;
		if ("overflow".equals(name))
			return overflow;
		return super.getFieldByName(name);
	}
}
