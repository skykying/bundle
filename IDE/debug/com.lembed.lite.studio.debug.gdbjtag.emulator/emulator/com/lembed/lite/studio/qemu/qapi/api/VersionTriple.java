package com.lembed.lite.studio.qemu.qapi.api;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.lembed.lite.studio.qemu.qapi.common.*;

import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/**
 * Autogenerated class.
 *
 * <pre>QApiStructDescriptor{name=VersionTriple, data={major=int, minor=int, micro=int}, innerTypes=null, fields=null, base=null}</pre>
 */
// QApiStructDescriptor{name=VersionTriple, data={major=int, minor=int, micro=int}, innerTypes=null, fields=null, base=null}
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class VersionTriple extends QApiType {

	
	@JsonProperty("major")
	@Nonnull
	public long major;
	
	@JsonProperty("minor")
	@Nonnull
	public long minor;
	
	@JsonProperty("micro")
	@Nonnull
	public long micro;

	@Nonnull
	public VersionTriple withMajor(long value) {
		this.major = value;
		return this;
	}

	@Nonnull
	public VersionTriple withMinor(long value) {
		this.minor = value;
		return this;
	}

	@Nonnull
	public VersionTriple withMicro(long value) {
		this.micro = value;
		return this;
	}

	public VersionTriple() {
	}

	public VersionTriple(long major, long minor, long micro) {
		this.major = major;
		this.minor = minor;
		this.micro = micro;
	}

	@JsonIgnore
	@Override
	public java.util.List<java.lang.String> getFieldNames() {
		java.util.List<java.lang.String> names = super.getFieldNames();
		names.add("major");
		names.add("minor");
		names.add("micro");
		return names;
	}

	@Override
	public Object getFieldByName(@Nonnull java.lang.String name) throws NoSuchFieldException {
		if ("major".equals(name))
			return major;
		if ("minor".equals(name))
			return minor;
		if ("micro".equals(name))
			return micro;
		return super.getFieldByName(name);
	}
}
